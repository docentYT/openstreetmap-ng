[project]
dependencies = [
  "aioboto3",
  "aiohttp[speedups]",
  "aiosmtplib",
  "alembic",
  "argon2-cffi",
  "arrow",
  "beautifulsoup4[charset-normalizer,lxml]",
  "blake3>=1.0.0",
  "brotli",
  "cython",
  "dnspython",
  "email-validator",
  "fastapi>=0",
  "feedgen",
  "githead>=1.2.0",
  "httpx[brotli,zstd]",
  "jinja2",
  "libvalkey>=4.0.1b1",
  "lrucache-rs>=1.0.0",
  "lxml",
  "markdown-it-py[linkify,plugins]",
  "nh3",
  "numpy",
  "opencv-python-headless",
  "orjson",
  "osm-shortlink>=1.0.0",
  "phonenumbers",
  "polyline-rs>=1.0.0",
  "protobuf==5.29.3",
  "pycryptodomex",
  "pydantic",
  "pyinstrument",
  "python-dateutil",
  "python-magic",
  "python-multipart",
  "pytz",
  "pyyaml",
  "rfc3986",
  "rtree",
  "scikit-learn",
  "sentry-sdk[aiohttp,fastapi,httpx,pure-eval,sqlalchemy]>=2.19.0",
  "setuptools",
  "shapely",
  "sizestr>=1.0.0",
  "sqlalchemy[postgresql-asyncpg]",
  "starlette-compress",
  "supervisor",
  "tqdm",
  "uvicorn[standard]",
  "valkey[libvalkey]>=6.0.0",
  "zid>=1.0.0",
  "zstandard",
]
name = "openstreetmap-ng"
requires-python = "~=3.13"
version = "0.0.0"

[dependency-groups]
dev = [
  "authlib",
  "cairosvg",
  "click",
  "coverage",
  "lxml-stubs",
  "polars[numpy]",
  "pre-commit",
  "pytest",
  "pytest-asyncio",
  "types-aioboto3[s3]",
  "types-protobuf",
]

[tool.uv]
compile-bytecode = true
package = true
python-downloads = "never"
python-preference = "only-system"

[tool.setuptools]
packages = ["app", "scripts", "tests", "typings"]

[tool.ruff]
extend-exclude = ["app/alembic/versions"]
indent-width = 4
line-length = 120
target-version = "py313"

[tool.ruff.lint]
# custom + https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules
ignore = [
  "ARG001", # unused-function-argument
  "ARG002", # unused-method-argument
  "B017", # assert-raises-exception
  "COM812", # missing-trailing-comma
  "COM819", # prohibited-trailing-comma
  "D206", # indent-with-spaces
  "D300", # triple-single-quotes
  "E111", # indentation-with-invalid-multiple
  "E114", # indentation-with-invalid-multiple-comment
  "E117", # over-indented
  "E501", # line-too-long
  "ISC001", # single-line-implicit-string-concatenation
  "ISC002", # multi-line-implicit-string-concatenation
  "PLR09", # too-many-*
  "PLR1702", # too-many-nested-blocks
  "PLR2",
  "PLW0603", # global-statement
  "PLW2901", # redefined-loop-name
  "PT001", # pytest-fixture-incorrect-parentheses-style
  "PT006", # pytest-parametrize-names-wrong-type
  "PT011", # pytest-raises-too-broad
  "PT023", # pytest-incorrect-mark-parentheses-style
  "PYI025", # unaliased-collections-abc-set-import
  "Q000", # bad-quotes-inline-string
  "Q001", # bad-quotes-multiline-string
  "Q002", # bad-quotes-docstring
  "Q003", # avoidable-escaped-quote
  "S101", # assert
  "S105", # hardcoded-password-string
  "SIM108", # if-else-block-instead-of-if-exp
  "TRY003", # raise-vanilla-args
  "W191", # tab-indentation
]
# see https://docs.astral.sh/ruff/rules/ for rules documentation
select = [
  "ARG", # flake8-unused-arguments
  "ASYNC", # flake8-async
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D200", # unnecessary-multiline-docstring
  "D201", # blank-line-before-function
  "D202", # blank-line-after-function
  "D207", # under-indentation
  "D208", # over-indentation
  "D209", # new-line-after-last-paragraph
  "D210", # surrounding-whitespace
  "D211", # blank-line-before-class
  "D403", # first-word-uncapitalized
  "D418", # overload-with-docstring
  "D419", # empty-docstring
  "DTZ", # flake8-datetimez
  "E4", # pycodestyle
  "E7",
  "E9",
  "F", # pyflakes
  "FAST", # fastapi
  "FLY", # flynt
  "FURB", # refurb
  "G", # flake8-logging-format
  "I", # isort
  "ICN", # flake8-import-conventions
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "N", # pep8-naming
  "NPY", # numpy
  "PERF", # perflint
  "PIE", # flake8-pie
  "PLC", # pylint
  "PLE", # pylint
  "PLR", # pylint
  "PLW", # pylint
  "PT", # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q", # flake8-quotes
  "RSE", # flake8-raise
  "RUF", # ruff
  "S", # flake8-bandit
  "SIM", # flake8-simplify
  "SLF", # flake8-self
  "SLOT", # flake8-slots
  "T10", # flake8-debugger
  "TD006", # invalid-todo-capitalization
  "TID", # flake8-tidy-imports
  "TRY", # tryceratops
  "UP", # pyupgrade
  "W6",
  "YTT", # flake8-2020
]
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
indent-style = "space"
line-ending = "lf"
quote-style = "single"
skip-magic-trailing-comma = false

[tool.ruff.lint.flake8-gettext]
function-names = ["nt", "t"]

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "single"
multiline-quotes = "double"

[tool.ruff.lint.pep8-naming]
extend-ignore-names = ["ET"]

[tool.ruff.lint.pylint]
max-args = 10

[tool.pyright]
disableBytesTypePromotions = true
exclude = [
  "**/.*",
  "**/__pycache__",
  "app/alembic/versions",
  "app/models/proto/**/*_pb2.py",
  "node_modules",
]
include = ["app", "scripts", "tests"]
pythonPlatform = "All"
pythonVersion = "3.13"
reportCallInDefaultInitializer = "error"
reportConstantRedefinition = "warning"
reportDeprecated = "warning"
reportImplicitOverride = "warning"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "information"
reportMatchNotExhaustive = "error"
reportMissingModuleSource = "none"
reportPrivateImportUsage = "none"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "warning"
reportUninitializedInstanceVariable = "error"
reportUnnecessaryCast = "information"
reportUnnecessaryComparison = "information"
reportUnnecessaryContains = "information"
reportUnnecessaryIsInstance = "information"
reportUnnecessaryTypeIgnoreComment = "information"
reportUntypedBaseClass = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedFunctionDecorator = "information"
reportUntypedNamedTuple = "warning"
strictListInference = true
strictSetInference = true
typeCheckingMode = "standard"
useLibraryCodeForTypes = false

# basedpyright specific:
reportPrivateLocalImportUsage = "warning"
reportInvalidCast = "warning"
reportImplicitAbstractClass = "information"

[tool.pytest.ini_options]
addopts = "--quiet --import-mode=importlib"
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
minversion = "6.0"
testpaths = ["tests"]

[tool.coverage.run]
source = ["app"]
